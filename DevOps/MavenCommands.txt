Maven
Ant


While devloping, we need a common structure between the developers

2. Managing the dependencies-- configuring in build path, maintianing the versions



Maven
-----
Apache Maven is a software project management and comprehension tool. 

Based on the concept of a project object model (POM), Maven can manage a project's build, reporting and 
documentation from a central piece of information. 


Using maven we can build and manage any Java-based project. 


compile  ----  compiles your java code and generates the .class files

clean  ---- this phase will delete the older version of .jar file from the target location

install  --- will actually create the .jar file and install in target folder.

package   

run --- to execute public static void main in maven project

test


ref: https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html


Maven Commands
--------------

1. mvn --version	- To check the version of maven installed.

2. mvn archetype:generate -DgroupId=com.examples.core -DartifactId=fismavendemo -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false

3. mvn package   - This command is used to execute all Maven phases until the package phase. 
				   It does the job of compiling, verifying and building the project. 
                   It builds the jar file and places it in the specified folder under the specified project

4. mvn clean install -  This maven command helps in executing a clean build life cycle and installs build 
						phase in the default build cycle. 

5. mvn compile		-    This command is used to compile the source code. 
						 It also compiles the classes that are stored at a particular target or class

6. mvn test			-    Maven also provides the facility of unit testing particular codes

7. mvn deploy

8. mvn compile exec:java -Dexec.mainClass="package.mainClassName"





Intermediate Commands
---------------------

    mvn help: describe	This command helps in getting the attributes of the plugin. All information regarding 
						the plugin can be found by this maven command.


    mvn help:effective-pom 		– By making use of this command a user can get an effective POM as an XML. 
								  This XML can be used for current build and for active profiles which are 
								  present in the project.


    mvn dependency: analyze 	– To analyze the dependencies that are present in the project in respect 
								  to prints that are unused, outdated dependencies and so on this command can 
								  be used.


    mvn dependency: tree 		– This command prints the complete tree of dependencies of the complete 
								  project. This is useful in getting all the transitive dependencies and gets 
								  all conflicts if there are any due to version. 
								  This command brings all the different dependencies.

    source. skip: 				  This maven command skips the complete packaging of source jars in the project.
	
    maven.test. skip 			– If a user wants to skip a particular test script from compilation and the 
								  execution of all tests then this command can be used. 
								  It can skip both unit and integration for the test for any application


    groups={TestNG Group Name(s)} – This command specifies the TestNG group of unit tests that are present and 
									which will be executed in the current build. 
									It runs the entire group of the test. 
									If there is no group specified then all the unit tests will be executed.

    prepare-package 			– Using this maven command all activities are performed for any operation 
								  which is required to prepare any package.

    pre-integration-test 		– It performs all activities which are necessary for the integration tests 
								  which will be executed. It may also clean up the environment.


    mvn help:effective-pom 		– Run this command to get the most minimal Maven project pom.xml.



Maven Profile Examples
---------------------

App.java
public class App {
    public static void main(String[] args) {
        String dbUrl = System.getProperty("db.url");
        String dbUsername = System.getProperty("db.username");
        String dbPassword = System.getProperty("db.password");

        System.out.println("Database URL: " + dbUrl);
        System.out.println("Database Username: " + dbUsername);
        System.out.println("Database Password: " + dbPassword);
    }
}

pom.xml
-------

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>MavenProfilesDemo</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <!-- ... other properties ... -->
        
        <!-- Default database configuration -->
        <db.url>jdbc:mysql://localhost:3306/default_db</db.url>
        <db.username>praveen</db.username>
        <db.password>kumar</db.password>
    </properties>
    
    <dependencies>
		<!--
		https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api -->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<version>5.10.0</version>
			<scope>test</scope>
		</dependency>
		<!--
		https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine -->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>5.10.0</version>
			<scope>test</scope>
		</dependency>
		<!--
		https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine -->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>5.10.0</version>
			<scope>test</scope>
		</dependency>


	</dependencies>

    <profiles>
        <!-- Development profile -->
        <profile>
            <id>dev</id>
            
            <properties>
                <db.url>jdbc:mysql://localhost:3306/dev_db</db.url>
                <db.username>dev_user</db.username>
                <db.password>dev_password</db.password>
                <activebyDefault>true</activebyDefault>
            </properties>
        </profile>

        <!-- Production profile -->
        <profile>
            <id>prod</id>
            <properties>
                <db.url>jdbc:mysql://production-server:3306/prod_db</db.url>
                <db.username>prod_user</db.username>
                <db.password>prod_password</db.password>
            </properties>
        </profile>
    </profiles>

    <!-- ... other elements ... -->

</project>


Maven Plugin Example
--------------------
Write any one psvm program and one example for testing

pom.xml
-------
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<groupId>com.example</groupId>
	<artifactId>MavenPluginDemo</artifactId>
	<version>1.0-SNAPSHOT</version>

	<properties>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
	</properties>
	<dependencies>
		<!--
		https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api -->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<version>5.10.0</version>
			<scope>test</scope>
		</dependency>
		<!--
		https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine -->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>5.10.0</version>
			<scope>test</scope>
		</dependency>
		<!--
		https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine -->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>5.10.0</version>
			<scope>test</scope>
		</dependency>


	</dependencies>

	<build>
		<plugins>
			<!-- Configure the maven-compiler-plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>

			<!-- Configure the maven-jar-plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>3.2.0</version>
				<configuration>
					<archive>
						<manifest>
							<mainClass>com.example.App</mainClass>
						</manifest>
					</archive>
				</configuration>
			</plugin>
			
			<!-- Configure the maven-surefire-plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>3.1.2</version>
				
			</plugin>
		</plugins>
	</build>

</project>





